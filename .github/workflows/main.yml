name: Deploy Frontend to GitHub Pages

on:
  push:
    branches:
      - main # Confirme se esta é a branch principal do seu repositório (ex: master, main, dev)
    paths:
      - 'frontend/**' # Isso fará o workflow rodar apenas se houver mudanças na pasta 'frontend/'
  workflow_dispatch: # Adicione esta linha para permitir execução manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      pages: write     # Concede permissão de escrita para o token de deploy nas GitHub Pages
      id-token: write  # Concede permissão para criar tokens OIDC para autenticação (necessário para deploy Pages)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a versão do Node.js que você usa localmente ou a recomendada pelo Expo SDK 53
          # cache: 'npm' # Opcional: Adicione cache para node_modules para builds mais rápidos
          # cache-dependency-path: 'frontend/package-lock.json' # Opcional: Define o caminho do lock file

      - name: Install dependencies (Frontend)
        run: npm install # Ou yarn install, se você usa yarn
        working-directory: ./frontend # IMPORTANTE: Execute este comando dentro da pasta do seu frontend

      - name: Build Frontend Web
        # REMOVA O EXPO_BASE_URL aqui, pois ele pode sobrescrever o 'homepage'
        # O Expo automaticamente pegará o 'homepage' do package.json se não for definido.
        # 'expo export' gera a pasta 'dist' por padrão para a web.
        run: npx expo export --platform web # Sem EXPO_BASE_URL
        working-directory: ./frontend # IMPORTANTE: Execute este comando dentro da pasta do seu frontend

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/dist # Caminho para a pasta que contém seu build web

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
